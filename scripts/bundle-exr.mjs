// ESM script to bundle parse-exr for browser
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('Bundling parse-exr for browser...');

// Import parse-exr dynamically
const parseExrModule = await import('parse-exr');
const parseExr = parseExrModule.default;

// Read the source files to get their content
const fflate = await import('fflate');
const fflatePath = path.join(__dirname, '../node_modules/fflate/esm/browser.js');
const parseExrPath = path.join(__dirname, '../node_modules/parse-exr/index.js');

const fflateSource = fs.readFileSync(fflatePath, 'utf8');
const parseExrSource = fs.readFileSync(parseExrPath, 'utf8');

// Create a bundled version
// We'll wrap everything in an IIFE and expose parseExr globally

const bundled = `// Bundled parse-exr with fflate for browser
// Auto-generated by scripts/bundle-exr.mjs - do not edit manually

(function() {
'use strict';

// ========== FFLATE MODULE ==========
// Inline fflate exports
${fflateSource.replace(/export \{[^}]+\};?\s*$/, '')}

// Create fflate object for parse-exr
const fflate = {
  unzipSync,
  strFromU8,
  // Add other exports as needed
};

// ========== PARSE-EXR MODULE ==========
${parseExrSource.replace('import * as fflate from "fflate";', '// fflate loaded above').replace('export default parseExr;', '')}

// ========== GLOBAL EXPORTS ==========
window.parseExr = parseExr;
window.parseExrConstants = {
  FloatType: 1015,
  HalfFloatType: 1016,
  RGBAFormat: 1023,
  RedFormat: 1028,
  NoColorSpace: "",
  LinearSRGBColorSpace: "srgb-linear"
};

console.log('parse-exr library loaded successfully');
})();
`;

// Write the bundled file
const outputPath = path.join(__dirname, '../media/parse-exr.js');
fs.writeFileSync(outputPath, bundled, 'utf8');

console.log(`âœ“ Bundle created: ${outputPath}`);
console.log(`  Size: ${(bundled.length / 1024).toFixed(1)} KB`);
